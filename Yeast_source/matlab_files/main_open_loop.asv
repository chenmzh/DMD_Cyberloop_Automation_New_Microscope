%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Main open loop - DMD illumination with predefined intensities
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This version uses intensities from layout.xlsx instead of feedback control
% Intensity scaling is controlled by light_normalization parameter in config.json
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% sending messages when error
% Set up email sending preferences
mail = 'MingzheMicroscope@gmail.com'; % Your Gmail address
password = 'tflcemzdmypjmsku'; % Your Gmail password
server = 'smtp.gmail.com';
port = '465';

setpref('Internet', 'E_mail', mail);
setpref('Internet', 'SMTP_Server', server);
setpref('Internet', 'SMTP_Username', mail);
setpref('Internet', 'SMTP_Password', password);

props = java.lang.System.getProperties;
props.setProperty('mail.smtp.auth', 'true');
props.setProperty('mail.smtp.socketFactory.class', 'javax.net.ssl.SSLSocketFactory');
props.setProperty('mail.smtp.socketFactory.port', port);

%% Setup working path
experiment_root = 'Y:\khammash\MC\microscope';
experiment = 'Yeast_fluorescence_20250915_agar_pad';
code_folder =  fullfile(experiment_root,'experiment',experiment);
data_root = 'E:\MC'; 
data_folder = fullfile(data_root,'data',experiment);


%% Variables to control experiment starts and loop number
%% ------------------------------------------------------------
initial_delay = 60*20; % In seconds
experiment_pattern_times = [20, 120, 60] * 60 ;
experiment_pattern_times_cumulative = cumsum(experiment_pattern_times);
experiment_pattern_values = [0, 1 ,0];
experiment_time_length = sum(experiment_pattern_times); % in seconds

% --- DEBUG TIMES
% initial_delay = 3;
% experiment_pattern_times = [10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10] * 2 ;
% experiment_pattern_times_cumulative = cumsum(experiment_pattern_times);
% experiment_pattern_values = [0, 1, 0, 1, 0 ,1, 0, 1, 0, 1, 0];
% experiment_time_length = sum(experiment_pattern_times); % in seconds

%% ------------------------------------------------------------



cd([fullfile(code_folder,'matlab_files')]);
currentRun = datestr(now, 'yyyymmddTHHMMSS');
microscopyFolderName = fullfile(data_folder, strcat('microscope_images_', currentRun));
locationFile = fullfile(code_folder, 'multipoints.xml');
mkdir(fullfile(microscopyFolderName,'data'))

% Process python files
python_path = fullfile(code_folder,'DMD_closed_loop_Left_right_half');
python_input_path = fullfile(microscopyFolderName,'segmentation');
python_output_path = fullfile(microscopyFolderName,'py_output');
if ~exist(python_output_path,'dir')
    mkdir(python_output_path);
end

% Edit config file for input and output path
modify_config(fullfile(python_path,'config.json'), 'input.input_dir', python_input_path)
modify_config(fullfile(python_path,'config.json'), 'output.output_dir', python_output_path)

%% Read the layout and config
% Output contain the layout info in 1 dimension, size is the dimension of layout
[Output,Size] = read_layout(code_folder);
Period = Output{1}; % Only value used in script, imported from excel file
intensity = Output{2}; % Raw intensity values from layout.xlsx
Illumination_time = Output{3};

% Read light normalization factor from config.json
config_json_path = fullfile(python_path, 'config.json');
config_data = jsondecode(fileread(config_json_path));
light_normalization = config_data.control.light_normalization; % mW/cm^2 when DMD intensity = 255

% Layout intensities are the actual desired intensities in mW/cm^2
actual_intensities = intensity; % These are already in mW/cm^2

% Calculate DMD intensity values (0-255 integers) from actual intensities
% DMD_intensity = round(actual_intensity * 255 / light_normalization)
dmd_intensities = round(actual_intensities * 255 / light_normalization);

% Check if any values exceed 255
if any(dmd_intensities > 255)
    max_actual_intensity = max(actual_intensities);
    max_dmd_intensity = max(dmd_intensities);
    error(['DMD intensity value exceeds 255! Maximum actual intensity: %.3f mW/cm^2 ' ...
           'requires DMD intensity: %d. Please reduce layout intensities or ' ...
           'increase light_normalization factor (current: %.3f mW/cm^2).'], ...
           max_actual_intensity, max_dmd_intensity, light_normalization);
end

% Ensure no negative values
dmd_intensities = max(0, dmd_intensities);

fprintf('Light normalization factor: %.3f mW/cm^2 (at DMD intensity 255)\n', light_normalization);
fprintf('Actual intensities range: %.3f - %.3f mW/cm^2\n', min(actual_intensities), max(actual_intensities));
fprintf('DMD intensities range: %d - %d\n', min(dmd_intensities), max(dmd_intensities));

Using_DMD = true;

% Initialize DMD once for the entire experiment to avoid reinitialization issues
if Using_DMD
    fprintf('Initializing DMD for the experiment...\n');
    
    % Add DMD path from local matlab_files folder
    current_dir = fileparts(mfilename('fullpath'));
    dmd_path = fullfile(current_dir, 'driverDMD');
    if exist(dmd_path, 'dir')
        addpath(genpath(dmd_path), '-end');
        if usejava('desktop')
            fprintf('âœ“ Added DMD driver path: %s\n', dmd_path);
        end
    else
        warning('DMD driver path not found: %s', dmd_path);
    end
    
    % Initialize DMD once for the entire experiment

    % experiment_dmd = DMD;
    % experiment_dmd.definePattern;
    % experiment_dmd.setMode(3);

end

% Let's assume period should be the multiples of 5
% Check if it's multiple of 5 first
% if any(mod(Period,30))
%     error("The period should be multiples of 50")
% end

% Calculate the multiplier of Period
% PERIOD FOR IMAGING
% Period = 120; % seconds
Period_Multiplier = floor(Period/Period); 
Period_Multiplier_temp = Period_Multiplier;

% Fetch the number of wells 
n_well = length(Period);

% Number of wells
parameters.n_well = n_well;
parameters.history_experiment = ""; % Full path for the folder of experiment data
process_experiment(parameters.history_experiment);

positionIndeces = 1:n_well; % for 24 well plate

%% Parameters
run = "RUN";

%% USER DEFINED IMAGING PARAMETERS
imaging.types = {'brightfield','Cy3'};
imaging.groups = {'Channels','Trigger'};
imaging.exposure = {10, 2000};
imaging.zOffsets = {[0,-0.5,+0.5], [0]};
imaging.condenser = {5, 5};
imaging.n_subimages = 3; %^2
imaging.field_diagonal = 1.3 * 10 ^ 3; % um

%% 
% STIMULATION DELAY
stimDel = -Inf; %ceil(6 * 60 * 60 / period);
stimDur = Inf; %ceil(48 * 60 * 60 / period);

%% Initialization
% ADJUST FOR TRAINING
imgTraining = imaging;
imgTraining.n_subimages = 1;

% MAKE MICROSCOPY FOLDER
mkdir(microscopyFolderName);

% INITIALIZE CONFIGURATIONS
config = config_routine(microscopyFolderName);

% GET XY LOCATIONS AND PFS_OFFSET
xyPoints = extract_nis_locations(locationFile);

% Run through plate from A01 to A10, then B01 to B10
sort_array = true;

if sort_array == true % set it to true, otherwise, also reverse the layout
    [xyPoints.location,index] = sort(xyPoints.location);
    xyPoints.coordinates = xyPoints.coordinates(index,:);
    xyPoints.pfsOffset = xyPoints.pfsOffset(index);
    xyPoints.zPosition = xyPoints.zPosition(index);
else
    % reverse the excel files
    % todo
end

% INITIAL MICROSCOPE-CONFIGURATION (Projection Shutter closed)
microscope.getDevice(config.deviceShutterProj).getProperty(config.propertyShutter).setValue('0');
microscope.getDevice(config.deviceFilterBlockProj).getProperty(config.propertyFilterBlock).setValue('0'); % Change to empty filter
area_log = [];

% Create DMD patterns based on calculated DMD intensity values
pattern_collection = cell(n_well, 1);
for i = 1:n_well
    if actual_intensities(i) > 0
        % Create a uniform pattern with the calculated DMD intensity (0-255)
        % DMD resolution is typically 1080 by 1920
        dmd_intensity = dmd_intensities(i);
        pattern_collection{i} = ones(1080, 1920) * dmd_intensity;
        fprintf('Well %d: DMD intensity = %d, Actual intensity = %.3f mW/cm^2\n', ...
                i, dmd_intensity, actual_intensities(i));
    else
        % No illumina
        % tion for this well
        pattern_collection{i} = zeros(1080, 1920);
        fprintf('Well %d: No illumination\n', i);
    end
end

%% Try to catch error
% Function that can potentially raise an error
try

    % shutter closed at the start of the experiment
microscope.getDevice(config.deviceShutterProj).getProperty(config.propertyShutter).setValue('0');

% apply initial delay
fprintf('Waiting %d seconds before starting the experiment...', initial_delay) 
pause(initial_delay)
fprintf('Starting now ...')

% saving initial starting time
experiment_start_time = datetime('now');


% Set filter block
microscope.getDevice(config.deviceFilterBlockProj).getProperty(config.propertyFilterBlock).setValue(num2str('1'));

microscope.getDevice(config.deviceShutterProj).getProperty(config.propertyShutter).setValue('0');

% initialize temp vars
time_within_the_period = 0;
last_period_start = datetime('now');
is_first_time = true;
last_pattern = -1;

% set position only once
go_to_position(positionIndeces(1),xyPoints,microscope);

% dmd always on setup
% img_matrix = pattern_collection{positionIndeces(1)};
% experiment_dmd.display(img_matrix);
% pause(2)

for loopNum = 1:100000
    
    time_within_the_period = seconds(datetime("now") - last_period_start)
    
    % pausing 1 second between actions for safety (are they blocking operations?)
    if time_within_the_period >= Period | is_first_time
        is_first_time = false;
        last_period_start = datetime("now");
        microscope.getDevice(config.deviceShutterProj).getProperty(config.propertyShutter).setValue('0');
        pause(0.5);
        capture_images(config, imaging, xyPoints, positionIndeces(1), microscope);
        pause(0.5);
        microscope.getDevice(config.deviceFilterBlockProj).getProperty(config.propertyFilterBlock).setValue(num2str('1'));
        microscope.getDevice(config.deviceShutterProj).getProperty(config.propertyShutter).setValue('1');
        config.sampleNum = config.sampleNum + 1; % Addup 1 sampleNum(time stamp)
    end
    
    % Illuminate with predefined pattern (no need to skip first run since patterns are pre-calculated)  

    current_time = datetime('now');
    dt = current_time - experiment_start_time;
    total_experiment_time = seconds(dt);

    pattern_index = find(experiment_pattern_times_cumulative > total_experiment_time, 1, 'first'); % search for current pattern index

    if length(pattern_index) > 0
        current_pattern = experiment_pattern_values(pattern_index);

        if last_pattern ~= current_pattern
            if current_pattern == 1
                microscope.getDevice(config.deviceShutterProj).getProperty(config.propertyShutter).setValue('1');
                % img_matrix = pattern_collection{positionIndeces(1)};
                % experiment_dmd.display(img_matrix);
            else
                microscope.getDevice(config.deviceShutterProj).getProperty(config.propertyShutter).setValue('0');
                % img_matrix = zeros(1080,1920);
                % experiment_dmd.display(img_matrix);
            end
            last_pattern = current_pattern
        end

    end
               
    % check if we have reached the time limit:
    current_time = datetime('now');
    dt = current_time - experiment_start_time;
    total_experiment_time = seconds(dt);

    if total_experiment_time > experiment_time_length
        % Open projection shutter to start illumination
        microscope.getDevice(config.deviceShutterProj).getProperty(config.propertyShutter).setValue('0');
        error("Time limit reached, bye bye!");
    end

end

catch ME
    % Send email when an error is caught
    subject = 'MATLAB Error Notification - Open Loop';
    message = sprintf('An error occurred in your MATLAB open loop script:\n\nError: %s\n\nLocation: %s\n\nDetails: %s', ...
                      ME.message, ME.stack.name, ME.stack.file);
    sendmail('cmzcswxp@gmail.com', subject, message);
    rethrow(ME);
end